PARSER_BEGIN(Parser)

import java.util.List;
import java.util.ArrayList;
import java.io.IOException;
/** ID lister. */
public class Parser {
  /** Main entry point. */
  public static void main(String args[]) throws IOException {
    Parser parser = new Parser(System.in);
    CodeBlock c = new CodeBlock();
    ASTNode exp;
	Environment env = new Environment();
    while (true) {
    try {
    exp = parser.Start();
    System.out.println( exp.eval(env) );
    env.maxid = -1;
   	exp.compile(c,env);
   	FileBuilder.writerTroll(c.code);
   	for(String s: c.code) {
   	  //if(s!=null)
		//System.out.println( s );
    }
    c = new CodeBlock();
   	
    } catch (Exception e) {
      System.out.println (e);
      parser.ReInit(System.in);
    }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DEF : "def">
  | 
  < IN : "in">
  |
  < END : "end">
  | 
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EQUALS : "=" >
  |
  < EQ : "==" >
  |
  < GREATARINA : ">" >
  |
  < SMOL : "<" >
  |
  < GREATEREQ : ">=" >
  |
  < SMALLEREQ : "<=" >
  |
  < RESTINHO : "%" >
  |
  < AND : "&&" >
  |
  < OR : "||" >
  |
  < NEGATION : "~" >
  |
  < NEW : "new" >
  |
  < POINTER : "!" >
  |
  < ASSIGMENT : ":=" >
  |
  < WHILE : "while" >
  |
  < DO : "do" >
  |
  < PRINT : "print" >
  |
  < PRINTLN : "println" >
  |
  < THEN : "then" >
  |
  < ELSE : "else" >
  |
  < EL: "\n" >
  |
  < COMA: ";" >
  |
  < DOUBLECOMA: ";;" > 
}

ASTNode Start() throws IOException:
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() throws IOException:
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS>) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else
                     t1 = new ASTSub(t1,t2);
                 } 
               ) * 
     { return t1; } 
}

ASTNode Term() throws IOException:
{Token op;
  ASTNode t1, t2;}
{
     t1 = Fact() ( ( op=<TIMES> | op=<DIV> ) t2 = Term() // changed
 		 { if (op.kind == TIMES) 
                         t1 = new ASTMult(t1,t2);
                   else  t1 = new ASTDiv(t1,t2);
                 }  
		)?
     { return t1; } 
}


ASTNode Fact() throws IOException:
{ Token n;
  List<String> ids = new ArrayList<String>();
  List<ASTNode> inits = new ArrayList<ASTNode>();
  ASTNode t, t1, body;}
{
   ( n=<Num> { body = new ASTNum(Integer.parseInt(n.image)); }
   | <LPAR> body=Exp() <RPAR>
   | <MINUS> body=Fact() { body = new ASTUMinus(body); }
   | <PLUS> body=Fact() { body = new ASTUPlus(body);}
   | <DEF> (n = <Id> <EQUALS> t = Exp() { ids.add(n.toString()); inits.add(t);} )+ <IN> t1 = Exp() <END> {body = new ASTDef(ids,inits,t1);}
   | n = <Id> {body = new ASTId(n.toString());}
   | <NEW> t = Exp() { body = new ASTNew(t); }
   | <POINTER> t = Exp() { body = new ASTPointer(t); } //recebe um valor inteiro e vai à sua posição de memória
   | t1 = Exp() <ASSIGMENT> t = Exp() { body = new ASTAssign (t1, t); } //Basicamente recebo um valor da posição da pilha t1 e o valor que ela recebe t
   | t1 = Exp() <COMA> t = Exp() { body = ASTSeq (t1, t); }
   )
 
   { return body; }
}


